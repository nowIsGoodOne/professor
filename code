#include <iostream>
#include <string>
#include <vector>
#include <unordered_map>
#include <fstream>

using namespace std;

// 기본 사용자 정보 클래스
class UserInfo {
public:
    string name;
    string id;
    string pw;
    int userType;

    // 생성자
    UserInfo(const string& id, const string& pw, const string& name, int userType)
        : id(id), pw(pw), name(name), userType(userType) {}
};

// 과목 클래스
class Subject {
private:
    string subjectName;
    string professor;
    unordered_map<string, double> studentGrades; // 학생 ID와 점수 매핑: gpt가 시도하는 건데, 정확히 이해는 못했습니다 ㅠ
    string gradingSystem;

public:
    // 생성자
    Subject(const string& subjectName, const string& professor, const string& gradingSystem)
        : subjectName(subjectName), professor(professor), gradingSystem(gradingSystem) {}

    // 학생: 일단 과목에 대한 성적 입력을 위해 만든 건데, 학생 클래스에 나중에 합쳐질 것 같습니다.
    void addStudent(const string& studentId, double grade = 0.0) {
        studentGrades[studentId] = grade;
    }

    // 과목 정보 출력: for문 부분은 GPT가 제안해준 겁니다.
    void displayInfo() const {
        cout << "과목명: " << subjectName << endl;
        cout << "교수명: " << professor << endl;
        cout << "채점 방식: " << gradingSystem << endl;
        cout << "학생 목록 및 점수:" << endl;
        for (auto it = studentGrades.begin(); it != studentGrades.end(); ++it) {
            cout << " - " << it->first << ": " << it->second << endl;
        }
    }

    // 학생 점수 업데이트: 이부분 특히 어려웠는데, 이후에 학생 아이디를 지정했을때 없는 아이디면 업데이트가 안되는 로직을 활용합니다.
    bool updateGrade(const string& studentId, double newGrade) {
        auto it = studentGrades.find(studentId);
        if (it != studentGrades.end()) {
            it->second = newGrade;
            return true;
        }
        return false;
    }

    // 과목명 반환: 이후에 과목 조회할때 필요함
    string getSubjectName() const {
        return subjectName;
    }

    // 학생 점수 맵 반환: 학생 id와 점수를 매칭칭
    unordered_map<string, double>& getStudentGrades() {
        return studentGrades;
    }
};

// 교수 클래스
class Professor : public UserInfo {
private:
    vector<Subject> subjects;

public:
    // 생성자
    Professor(const string& id, const string& pw, const string& name, int userType)
        : UserInfo(id, pw, name, userType) {}

    // 과목 조회
    void viewSubjects() const {
        cout << "\n=== 담당 과목 목록 ===" << endl;
        if (subjects.empty()) {
            cout << "담당 과목이 없습니다." << endl;
            return;
        }
        for (size_t i = 0; i < subjects.size(); ++i) {
            cout << i + 1 << ". " << subjects[i].getSubjectName() << endl;
        }
    }

    // 점수 업데이트
    void updateGrades() {
        if (subjects.empty()) {
            cout << "담당 과목이 없습니다." << endl;
            return;
        }
        viewSubjects();
        cout << "점수를 업데이트할 과목의 번호를 선택하세요: "; // 과목 목록 중에서 고르게 하기
        int command;
        cin >> command;

        if (command < 1 || command > subjects.size()) {
            cout << "잘못된 선택입니다." << endl;
            return;
        }

        Subject& selectedSubject = subjects[command - 1]; //선택과목 변수 저장
        selectedSubject.displayInfo(); //학생 목록과 점수 출력

        cout << "\n점수를 업데이트할 학생의 ID를 입력하세요: ";
        string studentId;
        cin >> studentId;

        cout << "새로운 점수를 입력하세요: ";
        double newGrade;
        cin >> newGrade;

        if (selectedSubject.updateGrade(studentId, newGrade)) {
            cout << "점수가 성공적으로 업데이트되었습니다." << endl;
        }
        else {
            cout << "학생 ID를 찾을 수 없습니다." << endl;
        }
    }

    // 메뉴 표시
    void displayMenu() {
        while (true) {
            cout << "\n**** 교수 메뉴 ****" << endl;
            cout << "1. 담당 과목 조회" << endl;
            cout << "2. 학생 점수 업데이트" << endl;
            cout << "3. 종료" << endl;
            cout << "선택: ";

            int choice;
            cin >> choice;

            switch (choice) {
            case 1:
                viewSubjects();
                // 선택한 과목의 상세 정보 보기
                if (!subjects.empty()) {
                    cout << "상세 정보를 보려면 과목 번호를 입력하세요 (0은 취소): ";
                    int subChoice;
                    cin >> subChoice;
                    if (subChoice >= 1 && subChoice <= subjects.size()) {
                        subjects[subChoice - 1].displayInfo();
                    }
                }
                break;
            case 2:
                updateGrades();
                break;
            case 3:
                cout << "메뉴를 종료합니다." << endl;
                return;
            default:
                cout << "잘못된 선택입니다. 다시 시도하세요." << endl;
            }
        }
    }
};
